<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetProjects.Layout.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item string value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.VisualTreeExtensions">
            <summary>
            A static class providing methods for working with the visual tree.  
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a framework element.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The visual children of the framework element.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualTreeExtensions.GetLogicalChildrenBreadthFirst(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the queue 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Accordion">
            <summary>
            Represents a collection of collapsed and expanded AccordionItem controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Accordion._scheduledActions">
            <summary>
            The items that are currently waiting to perform an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.AccordionButtonStyleName">
            <summary>
            The name used to indicate AccordionButtonStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isAllowedToWriteSelectedItems">
            <summary>
            Determines whether the SelectedItemsProperty may be written.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isAllowedToWriteSelectedIndices">
            <summary>
            Determines whether the SelectedIndicesProperty may be written.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isIgnoringSelectedIndicesChanges">
            <summary>
            Indicates that changes to the SelectedIndices collection should
            be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isIgnoringSelectedItemsChanges">
            <summary>
            Indicates that changes to the SelectedItems collection should
            be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isInSelectedItemsCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedItems Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isInSelectedIndicesCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedIndices Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._currentActioningItem">
            <summary>
            The item that is currently visually performing an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ItemsControlHelper">
            <summary>
            Gets the ItemsControlHelper that is associated with this control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsResizing">
            <summary>
            Gets a value indicating whether this instance is currently resizing.
            </summary>
            <value>True if this instance is resizing; otherwise, false.</value>
        </member>
        <member name="P:System.Windows.Controls.Accordion.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ExpandDirection">
            <summary>
            Gets or sets the ExpandDirection property of each 
            AccordionItem in the Accordion control and the direction in which
            the Accordion does layout.
            </summary>
            <remarks>Setting the ExpandDirection will set the expand direction 
            on the accordionItems.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectionMode">
            <summary>
            Gets or sets the AccordionSelectionMode used to determine the minimum 
            and maximum selected AccordionItems allowed in the Accordion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsMinimumOneSelected">
            <summary>
            Gets a value indicating whether at least one item is selected at 
            all times.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsMaximumOneSelected">
            <summary>
            Gets a value indicating whether at most one item is selected at all times.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <remarks>
            The default value is null.
            When multiple items are allowed (IsMaximumOneSelected false), 
            return the first of the selectedItems.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsValidItemForSelection(System.Object)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            <c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.Accordion._selectedItemNestedLevel">
            <summary>
            Nested level for SelectedItemCoercion.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected AccordionItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedIndexProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsValidIndexForSelection(System.Int32)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            <c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.Accordion._selectedIndexNestedLevel">
            <summary>
            Coercion level.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectionSequence">
            <summary>
            Gets or sets the SelectionSequence used to determine 
            the order of AccordionItem selection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectionSequenceProperty">
            <summary>
            Identifies the SelectionSequence dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectionSequencePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SelectionSequenceProperty changed.
            </summary>
            <param name="d">Accordion that changed its SelectionSequence property.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <remarks>Does not allow setting.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedItems.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedIndices">
            <summary>
            Gets the indices of the currently selected AccordionItems.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedIndicesProperty">
            <summary>
            Identifies the SelectedIndices dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndicesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedIndices.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.AccordionButtonStyle">
            <summary>
            Gets or sets the Style that is applied to AccordionButton elements
            in the AccordionItems.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.AccordionButtonStyleProperty">
            <summary>
            Identifies the AccordionButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AccordionButtonStyleProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its AccordionButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content 
            of each generated AccordionItem. 
            </summary>
            <remarks>Either ContentTemplate or ItemTemplate is used. 
            Setting both will result in an exception.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.ContentTemplateProperty">
            <summary>
            Identifies the ContentTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectionChangedEvent">
            <summary>
            Occurs when the SelectedItem or SelectedItems property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Accordion.SelectionChanged">
            <summary>
            Occurs when the SelectedItem or SelectedItems property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Accordion.SelectedItemsChanged">
            <summary>
            Occurs when the SelectedItems collection changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Accordion"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Accordion control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionAutomationPeer object for the Accordion.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given 
            item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own 
            container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            True if the item is (or is eligible to be) its own container; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> 
            method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item that should be cleared.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> 
            property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.InitializeNewItemsSource">
            <summary>
            Initializes the SelectedItem property when a new ItemsSource is set.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionItemUnselected(System.Windows.Controls.AccordionItem)">
            <summary>
            Called when an AccordionItem is unselected.
            </summary>
            <param name="accordionItem">The accordion item that was unselected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UnselectItem(System.Int32,System.Object)">
            <summary>
            Unselects the item.
            </summary>
            <param name="index">The index of the item that will be unselected.</param>
            <param name="item">The item that will be unselected. Can be null.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionItemSelected(System.Windows.Controls.AccordionItem)">
            <summary>
            Called when an AccordionItem selected.
            </summary>
            <param name="accordionItem">The accordion item that was selected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SelectItem(System.Int32)">
            <summary>
            Selects the item.
            </summary>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ChangeSelectedIndex(System.Int32,System.Int32)">
            <summary>
            Changes the selected item, by unselecting and selecting where 
            necessary.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected items collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndicesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected indices collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ProposeSelectedIndexCandidate(System.Int32)">
            <summary>
            Gets an item that is suitable for selection.
            </summary>
            <param name="nonCandidateIndex">Index that should not be considered if 
            possible.</param>
            <returns>An item that should be selected. This could be nonCandidateIndex, 
            if no other possibility was found.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SelectAll">
            <summary>
            Selects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is OneOrMore or ZeroOrMore all 
            AccordionItems would be selected. If the Accordion SelectionMode is 
            One or ZeroOrOne all items would be selected and unselected. Only 
            the last AccordionItem would remain selected. </remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UnselectAll">
            <summary>
            Unselects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is Zero or ZeroOrMore all 
            AccordionItems would be Unselected. If SelectionMode is One or  
            OneOrMode  than all items would be Unselected and selected. Only the 
            first AccordionItem would still be selected.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UpdateAccordionItemsSelection(System.Boolean)">
            <summary>
            Updates all accordionItems to be selected or unselected.
            </summary>
            <param name="selectedValue">True to select all items, false to unselect.</param>
            <remarks>Will not attempt to change a locked accordionItem.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SetLockedProperties">
            <summary>
            Sets the locked properties on all the items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectedItemChanged event when the SelectedItem 
            property value changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.RaiseOnSelectedItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise the SelectedItemsCollectionChanged event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> 
            instance containing the event data.</param>
            <remarks>This event is raised after the changes to the collection 
            have been processed.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the size of the Accordion changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnHeaderSizeChange(System.Windows.Controls.AccordionItem)">
            <summary>
            Called when size of a Header on the item changes.
            </summary>
            <param name="item">The item whose Header changed.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ScheduleAction(System.Windows.Controls.AccordionItem,System.Windows.Controls.AccordionAction)">
            <summary>
            Allows an AccordionItem to signal the need for a visual action 
            (resize, collapse, expand).
            </summary>
            <param name="item">The AccordionItem that signals for a schedule.</param>
            <param name="action">The action it is scheduling for.</param>
            <returns>True if the item is allowed to proceed without scheduling, 
            false if the item needs to wait for a signal to execute the action.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnActionFinish(System.Windows.Controls.AccordionItem)">
            <summary>
            Signals the finish of an action by an item.
            </summary>
            <param name="item">The AccordionItem that finishes an action.</param>
            <remarks>An AccordionItem should always signal a finish, for this call
            will start the next scheduled action.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.StartNextAction">
            <summary>
            Starts the next action in the list, in a particular order.
            </summary>
            <remarks>An AccordionItem is should always signal that it is 
            finished with an action.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.LayoutChildren">
            <summary>
            Determines and sets the height of the accordion items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsShouldFillWidth">
            <summary>
            Gets a value indicating whether the accordion fills width.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsShouldFillHeight">
            <summary>
            Gets a value indicating whether the accordion fills height.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SetPanelOrientation">
            <summary>
            Sets the orientation of the panel.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.AccordionAction">
            <summary>
            Determines the action the AccordionItem will perform.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.None">
            <summary>
            No action will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Collapse">
            <summary>
            A collapse will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Expand">
            <summary>
            An expand will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Resize">
            <summary>
            A resize will be performed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.AccordionButton">
            <summary>
            Represents the header for an accordion item.
            </summary>
            <remarks>By creating a seperate control, there is more flexibility in 
            the templating possibilities.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.Primitives.AccordionButton.ParentAccordionItem">
            <summary>
            Gets or sets a reference to the parent AccordionItem 
            of an AccordionButton.
            </summary>
            <value>The parent accordion item.</value>
        </member>
        <member name="M:System.Windows.Controls.Primitives.AccordionButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.AccordionButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.AccordionButton"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.AccordionButton.UpdateVisualState(System.Boolean)">
            <summary>
            Updates the state of the visual.
            </summary>
            <param name="useTransitions">If set to <c>true</c> use transitions.</param>
            <remarks>The header will follow the parent accordionitem states.</remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ExpandableContentControl">
            <summary>
            Represents a control with a single piece of content that expands or 
            collapses in a sliding motion to a specified desired size.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl._clippingRectangle">
            <summary>
            The Geometry used to clip this control. The control will potentially
            have less available space than the content it is arranging. That
            part will be clipped.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.ElementContentSiteName">
            <summary>
            The name of the ContentSite template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl._contentSite">
            <summary>
            BackingField for the ContentSite property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.ContentSite">
            <summary>
            Gets or sets the ContentSite template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.RevealMode">
            <summary>
            Gets or sets the direction in which the ExpandableContentControl 
            content window opens.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.RevealModeProperty">
            <summary>
            Identifies the RevealMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnRevealModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RevealModeProperty property changed handler.
            </summary>
            <param name="d">ExpandableContentControl that changed its RevealMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.IsVerticalRevealMode">
            <summary>
            Gets a value indicating whether the content should be revealed vertically.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.IsHorizontalRevealMode">
            <summary>
            Gets a value indicating whether the content should be revealed horizontally.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.Percentage">
            <summary>
            Gets or sets the relative percentage of the content that is 
            currently visible. A percentage of 1 corresponds to the complete
            TargetSize.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.PercentageProperty">
            <summary>
            Identifies the Percentage dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.CoercePercentageProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerce the percentage property as necessary.
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnPercentagePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PercentageProperty property changed handler.
            </summary>
            <param name="d">Page that changed its Percentage.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.TargetSize">
            <summary>
            Gets or sets the desired size of the ExpandableContentControl content.
            </summary>
            <remarks>Use the percentage property to animate to this size.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.TargetSizeProperty">
            <summary>
            Identifies the TargetSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TargetSizeProperty property changed handler.
            </summary>
            <param name="d">ExpandableContentControl that changed its TargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ExpandableContentControl.ContentSizeChanged">
            <summary>
            Occurs when the content changed its size.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Does a measure pass of the control and its content. The content will
            get measured according to the TargetSize and is clipped.
            </summary>
            <param name="availableSize">The available size that this object can 
            give to child objects. Infinity can be specified as a value to 
            indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based 
            on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.MeasureContent(System.Windows.Size)">
            <summary>
            Measures the content with a specific size.
            </summary>
            <param name="desiredSize">The size passed to the content.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.CalculateDesiredContentSize">
            <summary>
            Interprets TargetSize.
            </summary>
            <returns>A size that can be safely used to measure content.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the control and its content. Content is arranged according
            to the TargetSize and clipped.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.UpdateClip(System.Windows.Size)">
            <summary>
            Updates the clip geometry.
            </summary>
            <param name="arrangeSize">Size of the visible part of the control.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.RecalculatePercentage(System.Windows.Size)">
            <summary>
            Recalculates the percentage based on a new size.
            </summary>
            <param name="value">The new size used to base percentages on.</param>
            <returns>The new percentage value</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.CalculatePercentage(System.Windows.Controls.Primitives.ExpandableContentControl,System.Windows.Size)">
            <summary>
            Recalculates the percentage based on a new size.
            </summary>
            <param name="expandableContentControl">The control which is going to be evaluated</param>
            <param name="value">The new size used to base percentages on.</param>
            <returns>The new percentage value</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.SetRevealDimension">
            <summary>
            Sets the dimensions according to the current percentage.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.SetNonRevealDimension">
            <summary>
            Sets the opposite dimension.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.RelevantContentSize">
            <summary>
            Gets the content current visible size.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.#cctor">
            <summary>
            Static constructor for the <see cref="T:System.Windows.Controls.Primitives.ExpandableContentControl"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ExpandableContentControl"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ExpandableContentControl control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnContentSiteSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Raises the ContentSizeChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="T:System.Windows.Controls.AccordionItem">
            <summary>
            Represents a control that displays a header and has a collapsible 
            content window.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ElementExpandSiteName">
            <summary>
            The name of the ExpandSite template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's 
            used to select and unselect this AccordionItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._expandSite">
            <summary>
            BackingField for the ExpandSite property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandSite">
            <summary>
            Gets or sets the expand site template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._isBusyWithAction">
            <summary>
            Indicates that the control is currently executing an action.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._allowedToWriteExpandDirection">
            <summary>
            Determines whether the ExpandDirection property may be written.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandDirection">
            <summary>
            Gets the direction in which the AccordionItem content window opens.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static 
            function.
            This function validates the new value before calling virtual function 
            OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is 
            changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains 
            the old and new values.</param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the AccordionItem is 
            selected and its content window is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the 
            old and new values.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._isSelectedNestedLevel">
            <summary>
            Nested level for IsSelectedCoercion.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.IsLocked">
            <summary>
            Gets a value indicating whether the AccordionItem cannot be 
            selected by the user.
            </summary>
            <value><c>True</c> if this instance is locked; otherwise, <c>false</c>.</value>
            <remarks>The IsSelected property may not be changed when the 
            AccordionItem is locked. Locking occurs when the item is the first 
            in the list, the SelectionMode of Accordion requires atleast one selected
            AccordionItem and the AccordionItem is currently selected.</remarks>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._isLocked">
            <summary>
            BackingField for IsLocked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.AccordionButtonStyle">
            <summary>
            Gets or sets the Style used by AccordionButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.AccordionButtonStyleProperty">
            <summary>
            Identifies the AccordionButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnAccordionButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AccordionButtonStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its AccordionButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnAccordionButtonStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when AccordionButtonStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandableContentControlStyle">
            <summary>
            Gets or sets the Style used by ExpandableContentControl.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ExpandableContentControlStyleProperty">
            <summary>
            Identifies the ExpandableContentControlStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandableContentControlStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandableContentControlStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ExpandableContentControlStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandableContentControlStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when ExpandableContentControlStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._allowedToWriteContentTargetSize">
            <summary>
            Determines whether it is allowed to set the ContentTargetSize
            property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ContentTargetSize">
            <summary>
            Gets the Size that the content will animate to.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ContentTargetSizeProperty">
            <summary>
            Identifies the ContentTargetSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnContentTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentTargetSizeProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ContentTargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ParentAccordion">
            <summary>
            Gets or sets a reference to the parent Accordion of an
            AccordionItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ScheduledAction">
            <summary>
            Gets the scheduled action.
            </summary>
            <value>The scheduled action.</value>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.SelectedEvent">
            <summary>
            Occurs when the accordionItem is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AccordionItem.Selected">
            <summary>
            Occurs when the accordionItem is selected.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.UnselectedEvent">
            <summary>
            Occurs when the accordionItem is unselected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AccordionItem.Unselected">
            <summary>
            Occurs when the accordionItem is unselected.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.#ctor">
            <summary>
            Initializes a new instance of the AccordionItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnHeaderSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the size of the control changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.RelevantContentSize">
            <summary>
            Gets the relevant size of the current content.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.Schedule(System.Windows.Controls.AccordionAction)">
            <summary>
            Schedules the specified action.
            </summary>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.StartAction">
            <summary>
            Starts an action, such as resize, collapse or expand.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandSiteContentSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the content changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ShouldFillWidth">
            <summary>
            Gets a value indicating whether the AccordionItem fills width.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ShouldFillHeight">
            <summary>
            Gets a value indicating whether the AccordionItem fills height.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the AccordionItem control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.PreparePrepareHeaderedContentControlContainerForItemOverride(System.Windows.Controls.HeaderedContentControl,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <param name="parent">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnSelected">
            <summary>
            Raises the Selected event when the IsSelected property changes 
            from false to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnUnselected">
            <summary>
            Raises the Unselected event when the IsSelected property changes 
            from true to false.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.ToggleSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsSelected property.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.AccordionSelectionMode">
            <summary>
            Defines the minimum and maximum number of selected items allowed in an Accordion control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.One">
            <summary>
            Exactly one item must be selected in the Accordion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.OneOrMore">
            <summary>
            At least one item must be selected in the Accordion. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.ZeroOrOne">
            <summary>
            No more than one item can be selected in the accordion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.ZeroOrMore">
            <summary>
            Any number of  items can be selected in the Accordion. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SelectionSequence">
            <summary>
            Determines the order in which visual states are set.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SelectionSequence.CollapseBeforeExpand">
            <summary>
            Collapses are set before expansions.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SelectionSequence.Simultaneous">
            <summary>
            No delays, all states are set immediately.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_InvalidManipulationOfSelectionCollections">
            <summary>
              Looks up a localized string similar to The modification made to the collection lead to an invalid Selection state. Please check the SelectionMode to allow zero or multiple items..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnActionFinish_InvalidFinish">
            <summary>
              Looks up a localized string similar to Should not signal a finish when item is not expected to perform an action..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectedIndicesChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedIndices..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectedItemsChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedItems..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectionModePropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid SelectionMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectionSequencepropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid SelectionSequence value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_UnsupportedCollectionAction">
            <summary>
              Looks up a localized string similar to Unsupported collection action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_InvalidWriteToContentTargetSize">
            <summary>
              Looks up a localized string similar to ContentTargetSize is a read-only value and is set through Accordion..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_InvalidWriteToExpandDirection">
            <summary>
              Looks up a localized string similar to ExpandDirection is a read-only value and is set through Accordion..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_OnIsSelectedPropertyChanged_InvalidChange">
            <summary>
              Looks up a localized string similar to Cannot modify the IsSelected property while item is locked..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_StartAction_InvalidAction">
            <summary>
              Looks up a localized string similar to Invalid Action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_StartAction_InvalidCall">
            <summary>
              Looks up a localized string similar to Cannot start an action when there is no action scheduled..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TransitioningContentControl_TransitionNotFound">
            <summary>
              Looks up a localized string similar to Transition &apos;{0}&apos; was not defined..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TransitiotioningContentControl_IsTransitioningReadOnly">
            <summary>
              Looks up a localized string similar to IsTransitioning property is read-only..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TransitioningContentControl">
            <summary>
            Represents a control with a single piece of content and when that content 
            changes performs a transition animation. 
            </summary>
            <QualityBand>Experimental</QualityBand>
            <remarks>The API for this control will change considerably in the future.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.PresentationGroup">
            <summary>
            The name of the group that holds the presentation states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.NormalState">
            <summary>
            The name of the state that represents a normal situation where no
            transition is currently being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.DefaultTransitionState">
            <summary>
            The name of the state that represents the default transition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.PreviousContentPresentationSitePartName">
            <summary>
            The name of the control that will display the previous content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.CurrentContentPresentationSitePartName">
            <summary>
            The name of the control that will display the current content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.CurrentContentPresentationSite">
            <summary>
            Gets or sets the current content presentation site.
            </summary>
            <value>The current content presentation site.</value>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.PreviousContentPresentationSite">
            <summary>
            Gets or sets the previous content presentation site.
            </summary>
            <value>The previous content presentation site.</value>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl._allowIsTransitioningWrite">
            <summary>
            Indicates whether the control allows writing IsTransitioning.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.IsTransitioning">
            <summary>
            Gets a value indicating whether this instance is currently performing
            a transition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.IsTransitioningProperty">
            <summary>
            Identifies the IsTransitioning dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnIsTransitioningPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsTransitioningProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its IsTransitioning.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl._currentTransition">
            <summary>
            The storyboard that is used to transition old and new content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.CurrentTransition">
            <summary>
            Gets or sets the storyboard that is used to transition old and new content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.Transition">
            <summary>
            Gets or sets the name of the transition to use. These correspond
            directly to the VisualStates inside the PresentationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.TransitionProperty">
            <summary>
            Identifies the Transition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnTransitionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TransitionProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its Transition.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.RestartTransitionOnContentChange">
            <summary>
            Gets or sets a value indicating whether the current transition
            will be aborted when setting new content during a transition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.RestartTransitionOnContentChangeProperty">
            <summary>
            Identifies the RestartTransitionOnContentChange dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnRestartTransitionOnContentChangePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RestartTransitionOnContentChangeProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its RestartTransitionOnContentChange.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnRestartTransitionOnContentChangeChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the RestartTransitionOnContentChangeProperty changes.
            </summary>
            <param name="oldValue">The old value of RestartTransitionOnContentChange.</param>
            <param name="newValue">The new value of RestartTransitionOnContentChange.</param>
        </member>
        <member name="E:System.Windows.Controls.TransitioningContentControl.TransitionCompleted">
            <summary>
            Occurs when the current transition has completed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TransitioningContentControl"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TransitioningContentControl control 
            when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.StartTransition(System.Object,System.Object)">
            <summary>
            Starts the transition.
            </summary>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnTransitionCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the Completed event of the transition storyboard.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.AbortTransition">
            <summary>
            Aborts the transition and releases the previous content.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.GetStoryboard(System.String)">
            <summary>
            Attempts to find a storyboard that matches the newTransition name.
            </summary>
            <param name="newTransition">The new transition.</param>
            <returns>A storyboard or null, if no storyboard was found.</returns>
        </member>
        <member name="T:System.Windows.Controls.VirtualPanel">
            <summary>
            Provides a framework for <see cref="T:System.Windows.Controls.Panel"/> elements that virtualize their child data collection. This is an abstract class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VirtualPanel.IsVirtualizingProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.VirtualPanel.IsVirtualizing"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.OnIsVirtualizingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.VirtualPanel.IsVirtualizing"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.VirtualPanel.IsVirtualizing">
            <summary>
            Gets or sets a value that indicates that this <see cref="T:System.Windows.Controls.VirtualPanel"/> is virtualizing its child collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VirtualPanel.RealizationPriorityProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.VirtualPanel.RealizationPriority"/> property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.VirtualPanel.RealizationPriority">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Threading.DispatcherPriority"/> of the realization pass for this <see cref="T:System.Windows.Controls.VirtualPanel"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VirtualPanel.IndexForItemContainerProperty">
            <summary>
            This is an attached property that the panel sets on each container (generated or direct) to point back to the index of the item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.VirtualPanel.RealizeOperation">
            <summary>
            Holds the latest queued realization operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.VirtualPanel.ItemsOwner">
            <summary>
            Returns the <see cref="T:System.Windows.Controls.ItemsControl"/> that this panel hosts items for.
            </summary>
            <value></value>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.IndexFromContainer(System.Windows.UIElement)">
            <summary>
            Returns the index to an item that corresponds to the specified, generated <see cref="T:System.Windows.UIElement"/>. 
            </summary>
            <param name="container">The <see cref="T:System.Windows.UIElement"/> that corresponds to the item index to be returned.</param>
            <returns>An <see cref="T:System.Int32"/> index to an item that corresponds to the specified <see cref="T:System.Windows.UIElement"/> if it was generated and hosted by this panel; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.ItemFromContainer(System.Windows.UIElement)">
            <summary>
            Returns the item that corresponds to the specified, generated <see cref="T:System.Windows.UIElement"/>. 
            </summary>
            <param name="container">The <see cref="T:System.Windows.UIElement"/> that corresponds to the item to be returned.</param>
            <returns>An <see cref="T:System.Object"/> that is the item which corresponds to the specified <see cref="T:System.Windows.UIElement"/> if it was generated and hosted by this panel; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Windows.UIElement"/> corresponding to the item at the given index within the item collection if it has been realized.
            </summary>
            <param name="itemIndex">The index of the desired item. </param>
            <returns>The element corresponding to the item at the given index within the item collection or returns <c>null</c> if the item is not realized.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.ContainerFromItem(System.Object)">
            <summary>
            Returns the <see cref="T:System.Windows.UIElement"/> corresponding to the given item if it has been realized.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> item to find the <see cref="T:System.Windows.UIElement"/> for.</param>
            <returns>A <see cref="T:System.Windows.UIElement"/> that corresponds to the given item. Returns <c>null</c> if the item does not belong to the item collection, or if a <see cref="T:System.Windows.UIElement"/> has not been generated for it.</returns>
            <remarks>Use caution when calling this method as it does a linear search for the item.  Consider calling <see cref="M:System.Windows.Controls.VirtualPanel.ContainerFromIndex(System.Int32)"/> instead.</remarks>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.InvalidateReality">
            <summary>
            Invalidates the realization state of all items being hosted by this panel. After the invalidation, the panel will have its reality updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.Controls.VirtualPanel.UpdateReality"/>. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.UpdateReality">
            <summary>
            Ensures that all items being hosted by this panel are properly realized or virtualized.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.RealizeCore(System.Object)">
            <summary>
            Manages calls to <see cref="M:System.Windows.Controls.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/>.
            </summary>
            <param name="state">A custom state object left over from a previous call to <see cref="M:System.Windows.Controls.VirtualPanel.RealizeCore(System.Object)"/> if additional processing was needed.</param>
            <returns>A custom state object if additional processing is needed; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)">
            <summary>
            When overridden in a derived class, realizes and/or virtualizes items, optionally deferring additional realization.
            </summary>
            <param name="items">The current items being hosted by this panel.</param>
            <param name="state">A custom state object left over from a previous call to <see cref="M:System.Windows.Controls.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/> if additional processing was needed.</param>
            <returns>Implementations may optionally defer additional processing by return a non-<c>null</c> object, which will then be passed to a future call to <see cref="M:System.Windows.Controls.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Indicates that the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> property value has changed.
            </summary>
            <param name="oldIsItemsHost">The old property value.</param>
            <param name="newIsItemsHost">The new property value.</param>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.OnIsVirtualizingChanged(System.Boolean,System.Boolean)">
            <summary>
            Indicates that the <see cref="P:System.Windows.Controls.VirtualPanel.IsVirtualizing"/> property value has changed.
            </summary>
            <param name="oldIsVirtualizing">The old property value.</param>
            <param name="newIsVirtualizing">The new property value.</param>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Maintains event handlers when the items source has changed.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that raised the event.</param>
            <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event.</param>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl"/> for this <see cref="T:System.Windows.Controls.Panel"/> changes.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that raised the event.</param>
            <param name="args">Provides data for the <see cref="!:ItemsChanged"/> event.</param>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.RealizeItem(System.Int32)">
            <summary>
            Realizes an item container for the item with the given index.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns>The child that was created and added to the internal children.</returns>
        </member>
        <member name="M:System.Windows.Controls.VirtualPanel.VirtualizeItem(System.Int32)">
            <summary>
            Removes an item container for the item with the given index.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns><c>true</c> if the child had been previously realized and was now removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.Windows.Controls.VirtualPanel.VirtualItemsList">
            <summary>
            Returns a list which represents a subset of the elements in the source list. 
            </summary>
            <remarks>
            This list is used in NotifyCollectionChangedEventArgs because we might be dealing with
            virtualized lists that raise events for items changing when the items haven't been
            loaded into memory yet.  If the client needs to inspect the item, then they can index
            into this list and it will retrieve it from the original source, but if they don't need
            to inspect the item then we spare the cost of the lookup and retrieval.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.ZoomableCanvas">
            <summary>
            Defines an area within which you can explicitly position an infinite number of child elements by using coordinates that are relative to the <see cref="T:System.Windows.Controls.ZoomableCanvas"/> area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.ApplyTransformProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.CoerceRenderTransform(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a transform applying the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> when <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A new transform if <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>; otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnApplyTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform">
            <summary>
            Gets or sets whether to automatically apply a <see cref="T:System.Windows.Media.ScaleTransform"/> to the canvas.
            </summary>
            <value><c>true</c> or <c>false</c>.  The default is <see cref="!:true"/>.</value>
            <remarks>
            The value of this dependency property is <c>true</c> by default, meaning that the <see cref="!:RenderTransform"/> property will contain a <see cref="T:System.Windows.Media.Transform"/> that scales the canvas and its children automatically.
            This property can be set to <c>false</c> prevent the automatic transform.  This means that children are responsible for changing their appearance when the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> property changes.
            Note that this property does not affect the <b>placement</b> of the elements; the children are automatically placed with the top-left corners of their elements at the appropriate positions on the screen, regardless of the value of <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/>.
            <para>
            Children will usually do this by simply changing their <see cref="!:Width"/> and <see cref="!:Height"/> to become larger or smaller when the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> property increases or decreases.
            This is useful when pen widths are important, such as an element surrounded with a <see cref="T:System.Windows.Controls.Border"/> with <see cref="P:System.Windows.Controls.Border.BorderThickness"/> set to <c>1.0</c>.
            If <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, then as <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> decreases the shape will be scaled down and the border stroke will become thinner than one pixel, possibly too thin to see even with sub-pixel rendering.
            This is also true when drawing paths, edges of a graph, or any other element that uses <see cref="T:System.Windows.Media.Pen"/> to draw lines and strokes.
            In these cases setting <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> to <c>false</c> and setting the <see cref="!:Shape"/>'s <see cref="!:Shape.Stretch"/> to <see cref="F:System.Windows.Media.Stretch.Fill"/> while binding its <see cref="!:Width"/> and <see cref="!:Height"/> to a factor of <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> will often provide a better effect.
            </para>
            <para>
            Another reason to set this property to <c>false</c> is when elements change their representation or visual state based on the scale (also known as "semantic zoom").
            For example, imagine a canvas showing multiple thumbnails of spreadsheets and the relationships between their formulas and values.
            When <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> is set to <c>1.0</c> (the default value), each spreadsheet element might be fully interactive, editable, and showing all rows and columns.
            When zooming out, and <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> gets small enough that there is not enough room for each spreadsheet to show all of its rows and columns, it may change its representation into a bar chart or pie chart with axis values and a legend instead.
            When zooming even further out, and <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> gets small enough that there is not enough room for the axis and legend, it may simply remove the axis and legend to make more room for the graphical portion of the chart.
            Since the children of the canvas can be arbitary rich UIElements, they can dynamically change their representation and be interacted with at all levels of zoom.
            This is in sharp contrast to multi-scale-image approaches such as Silverlight's Deep Zoom since those scenarios are simply performing linear scale transformations on pre-computed static bitmaps.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.ActualViewboxProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.CoerceActualViewbox(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being displayed.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Windows.Rect"/> representing the area of the canvas (in canvas coordinates) that is being displayed by this panel.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnActualViewboxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox">
            <summary>
            Gets a <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being displayed by this panel.
            </summary>
            <value>A <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being displayed by this panel.</value>
            <remarks>
            The value of this property is automatically computed based on the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/>, <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/>, and <see cref="!:RenderSize"/> of this panel.
            It is independent (and usually different) from the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> dependency property.
            </remarks>
            <seealso cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.ViewboxProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsViewboxValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnViewboxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.Viewbox">
            <summary>
            Gets or sets the portion of the canvas (in canvas coordinates) that should be attempted to be displayed by this panel.
            </summary>
            <value>A <see cref="T:System.Windows.Rect"/> specifying the portion of the canvas that should be displayed by this panel, or <see cref="P:System.Windows.Rect.Empty"/> when unspecified.  The default value is <see cref="P:System.Windows.Rect.Empty"/>.</value>
            <remarks>
            The area of the canvas shown by this panel can be controlled by either setting <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/>, or by setting the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/>, <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/>, and <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> properties.
            When <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> is set to anything other than <see cref="P:System.Windows.Rect.Empty"/>, the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> will be automatically coerced to appropriate values according to the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> properties.
            Note that the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> mode of <see cref="F:System.Windows.Media.Stretch.Fill"/> is not supported, so unless the aspect ratio of <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> exactly matches the aspect ratio of <see cref="!:RenderSize"/> the actual area displayed will be more or less than <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/>.
            The exact area that is displayed can be determined by the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> property in this case.
            </remarks>
            <seealso cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/>
            <seealso cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/>
            <seealso cref="P:System.Windows.Media.TileBrush.Viewbox"/>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.StretchProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsStretchValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnStretchChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.Stretch">
            <summary>
            Gets or sets a value that specifies how the content of the canvas is displayed when <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> is set.
            </summary>
            <value>One of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> values other than <see cref="F:System.Windows.Media.Stretch.Fill"/>.  The default is <see cref="F:System.Windows.Media.Stretch.Uniform"/>.</value>
            <remarks>
            Please see the documentation of <see cref="P:System.Windows.Media.TileBrush.Stretch"/> for a detailed explanation of the effects of this property.
            The <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> mode of <see cref="F:System.Windows.Media.Stretch.Fill"/> is not supported, so unless the aspect ratio of <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> exactly matches the aspect ratio of <see cref="!:RenderSize"/> the actual area displayed will be more or less than <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/>.
            The exact area that is displayed can be determined by the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> property in this case.
            </remarks>
            <seealso cref="P:System.Windows.Media.TileBrush.Stretch"/>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.StretchDirectionProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsStretchDirectionValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnStretchDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.StretchDirection">
            <summary>
            Gets or sets how setting the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> property can affect the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/>.
            </summary>
            <value>One of the <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> values.  The default is <see cref="F:System.Windows.Controls.StretchDirection.Both"/></value>
            <remarks>
            When setting the <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> property, the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> properties are automatically coerced to the appropriate values according to the <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> properties, and any existing values of <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> will be overridden.
            However, when the value of <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> is set to anything other than <see cref="F:System.Windows.Controls.StretchDirection.Both"/>, then the setting of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> property can limit the range of the automatically computed value.
            The exact area that is displayed can be determined by the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> property in this case.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.OffsetProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsOffsetValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.CoerceOffset(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Windows.Point"/> representing top-left point of the canvas (in canvas coordinates) that is currently being displayed after taking <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/> into account.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Windows.Point"/> representing top-left point of the canvas (in canvas coordinates) that is currently being displayed.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Controls.ZoomableCanvas.Offset" -->
        <member name="F:System.Windows.Controls.ZoomableCanvas.ScaleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsScaleValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.CoerceScale(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Double"/> representing the scale of the content that is currently being displayed after taking <see cref="P:System.Windows.Controls.ZoomableCanvas.Viewbox"/>, <see cref="P:System.Windows.Controls.ZoomableCanvas.Stretch"/>, and <see cref="P:System.Windows.Controls.ZoomableCanvas.StretchDirection"/> into account.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Double"/> representing scale of the content that is currently being displayed.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnScaleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Windows.Controls.ZoomableCanvas.Scale" -->
        <member name="F:System.Windows.Controls.ZoomableCanvas.RealizationLimitProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationLimit"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsRealizationLimitValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationLimit"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnRealizationLimitChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationLimit"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.RealizationLimit">
            <summary>
            Gets or sets the maximum number of elements that will be instantiated on the canvas when <see cref="!:IsVirtualizing"/> is set to <see cref="!:true"/>.
            </summary>
            <value>An <see cref="T:System.Int32"/> between <c>0</c> and <see cref="F:System.Int32.MaxValue"/>.  The default is <see cref="F:System.Int32.MaxValue"/>.</value>
            <remarks>
            When the children of the canvas are being populated through an <see cref="T:System.Windows.Controls.ItemsControl"/>, visual elements will be instantiated for the first <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationLimit"/> items within the <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/>.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.RealizationRateProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationRate"/> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.IsRealizationRateValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationRate"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnRealizationRateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationRate"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.RealizationRate">
            <summary>
            Gets or sets the maximum number of elements that will be realized or virtualized at one time before yielding control back to the dispatcher when <see cref="!:IsVirtualizing"/> is set to <see cref="!:true"/>.
            </summary>
            <value>An <see cref="T:System.Int32"/> between <c>0</c> and <see cref="F:System.Int32.MaxValue"/>.  The default is <see cref="F:System.Int32.MaxValue"/>.</value>
            <remarks>
            By default, the value of this property is <see cref="F:System.Int32.MaxValue"/> which means that all realization and virtualization happens at once, at the time determined by <see cref="!:RealizationPriority"/>.
            The default behavior is optimized to realize all elements as quickly as possible, at the expensive of application responsiveness while the realization is happening.
            Setting the <see cref="!:RealizationPriority"/> to <see cref="F:System.Windows.Threading.DispatcherPriority.Input"/> and decreasing the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationRate"/> will make the application feel more responsive but will take longer to realize all items.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.#cctor">
            <summary>
            Performs a one-time initialization of <see cref="T:System.Windows.Controls.ZoomableCanvas"/>-related metadata.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.#ctor">
            <summary>
            Ensures coersion routines are invoked with their default values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource">
            <summary>
            Provides a two-dimensional index of items that can be quickly queried for all items that intersect a given rectangle.
            </summary>
            <remarks>
            When the <see cref="T:System.Windows.Controls.ZoomableCanvas"/> is hosting items for an <see cref="T:System.Windows.Controls.ItemsControl"/>, the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> can implement this interface to greatly speed up virtualization in the canvas.
            If any of those conditions are not true, then the canvas must realize every item at least once in order to determine its bounds before it can virtualize it, and then once it is virtualized it will have no means of moving spontaneously back into view.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource.Extent">
            <summary>
            Gets the entire extent of the index, which is typically the union of all bounding boxes of all items within the set.
            </summary>
            <remarks>
            This value is used when determining the extent of the scroll bars when the canvas is hosted in a scroll viewer.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource.Query(System.Windows.Rect)">
            <summary>
            Gets the set of items that intersect the given rectangle.
            </summary>
            <param name="rectangle">The area in which any intersecting items are returned.</param>
            <returns>A result set of all items that intersect the given rectangle.</returns>
            <remarks>
            The enumerator returned by this method is used lazily and sometimes only partially, meaning it should return quickly without computing the entire result set immediately for best results.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource.ExtentChanged">
            <summary>
            Occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource.Extent"/> property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource.QueryInvalidated">
            <summary>
            Occurs when the results of the last query are no longer valid and should be re-queried.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex">
            <summary>
            Private implementation of <see cref="T:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource"/> when the items source is not one.
            </summary>
            <remarks>
            This class efficiently implements a spatial index by internally using a PriorityQuadTree data structure.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.SpatialItem">
            <summary>
            Private class that holds an index/bounds pair.
            </summary>
            <remarks>
            A Tuple could have been used instead except that we want Index to be mutable.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex._tree">
            <summary>
            We use a PriorityQuadTree to implement our spatial index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex._items">
            <summary>
            This is a list of all of the spatial items in the index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex._extent">
            <summary>
            Holds the accurate extent of all item bounds in the index.  This may be different from _tree.Extent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex._lastQuery">
            <summary>
            Holds the last query used in order to know when to raise the <see cref="E:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.QueryInvalidated"/> event.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.ExtentChanged">
            <summary>
            Occurs when the value of the <see cref="P:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Extent"/> property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.QueryInvalidated">
            <summary>
            Occurs when the results of the last query are no longer valid and should be re-queried.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Query(System.Windows.Rect)">
            <summary>
            Get a list of the items that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>
            List of zero or more items that intersect the given bounds, returned in the order given by the priority assigned during Insert.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Extent">
            <summary>
            Gets the computed minimum required rectangle to contain all of the items in the index.  This property is also settable for efficiency the future extent of the items is known.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Item(System.Int32)">
            <summary>
            Gets or sets the bounds for the item with the given <paramref name="index"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The bounds of the item, or <see cref="P:System.Windows.Rect.Empty"/> if the bounds are unknown.</returns>
            <remarks>
            Items with bounnds of <see cref="P:System.Windows.Rect.Empty"/> are always returned first from any query.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.InsertRange(System.Int32,System.Int32)">
            <summary>
            Adds or inserts the given <see cref="!:count"/> of items at the given <see cref="!:index"/>.
            </summary>
            <param name="index">The index at which to insert the items.</param>
            <param name="count">The number of items to insert.</param>
            <remarks>
            All items are inserted with bounds of <see cref="P:System.Windows.Rect.Empty"/>, meaning they will be returned from all queries.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the given <see cref="!:count"/> of items at the given <see cref="!:index"/>.
            </summary>
            <param name="index">The index at which to remove from.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Reset(System.Int32)">
            <summary>
            Clears and resets the spatial index to hold the given <see cref="!:count"/> of items.
            </summary>
            <param name="count">The number of items within the index.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.PrivateSpatialIndex.Optimize">
            <summary>
            Optimizes the spatial index based on the current extent if optimization is warranted.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.SpatialIndex">
            <summary>
            Two-dimentional spatial index of our data items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.PrivateIndex">
            <summary>
            Private implementation of <see cref="T:System.Windows.Controls.ZoomableCanvas.ISpatialItemsSource"/> when the items source does not provide one.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.RealizedItems">
            <summary>
            Ordered list of realized items based on the order they are returned from the spatial index.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnIsVirtualizingChanged(System.Boolean,System.Boolean)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:System.Windows.Controls.VirtualPanel.IsVirtualizing"/> property has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Refreshes our data when the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> property has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Dispatches to specific methods to update the spatial index when the items have changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnItemsAdded(System.Int32,System.Collections.IList)">
            <summary>
            Updates our private spatial index when items are added to the item source.
            </summary>
            <param name="index">The index of the first item that was added.</param>
            <param name="items">The items that were added.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnItemsRemoved(System.Int32,System.Collections.IList)">
            <summary>
            Updates our private spatial index when items are removed from the item source.
            </summary>
            <param name="index">The old index of the first item that was removed.</param>
            <param name="items">The items that were removed.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnItemsReset">
            <summary>
            Resets and initializes our spatial indices when the items source has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnSpatialQueryInvalidated(System.Object,System.EventArgs)">
            <summary>
            Invalidates reality when the last spatial query is no longer valid.
            </summary>
            <param name="sender">The spatial index.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnSpatialExtentChanged(System.Object,System.EventArgs)">
            <summary>
            Invalidates the extent when the spatial index extent has changed.
            </summary>
            <param name="sender">The spatial index.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.RealizeOverride(System.Collections.IEnumerable,System.Object)">
            <summary>
            Performs realization and virtualization in batches based on the <see cref="P:System.Windows.Controls.ZoomableCanvas.RealizationRate"/>. 
            </summary>
            <param name="items">The current items being hosted by this panel.</param>
            <param name="state">The previous return value of this method.</param>
            <returns>A non-<c>null</c> value if further realization is required; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.RealizeOverride">
            <summary>
            Realizes and virtualizes items based on the current viewbox.
            </summary>
            <returns>An enumerator which allows this method to continue realization where it left off.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Updates the calculated <see cref="P:System.Windows.Controls.ZoomableCanvas.ActualViewbox"/> and the <see cref="P:System.Windows.Controls.ZoomableCanvas.Scale"/> and <see cref="P:System.Windows.Controls.ZoomableCanvas.Offset"/> when the size changes.
            </summary>
            <param name="sizeInfo">Size information about the render size.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OnPositioningChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invalidates the arrangement of canvases when their children's positions change.
            </summary>
            <param name="d">Dependency object whos position has changed.</param>
            <param name="e">Event arguments related to the change.</param>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.AppliedScaleTransform">
            <summary>
            Gets the applied scale transform if <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.AppliedTranslateTransform">
            <summary>
            Gets the applied translate transform if <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.ScaleOverride(System.Double)">
            <summary>
            Scales the child elements of a <see cref="T:System.Windows.Controls.ZoomableCanvas"/> by applying a transform if <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, or by calling <see cref="!:FrameworkElement.InvalidateArrange"/> otherwise.
            </summary>
            <param name="scale">The new scale of the canvas.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.OffsetOverride(System.Windows.Point)">
            <summary>
            Offsets the child elements of a <see cref="T:System.Windows.Controls.ZoomableCanvas"/> by applying a transform if <see cref="P:System.Windows.Controls.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, or by calling <see cref="!:FrameworkElement.InvalidateArrange"/> otherwise.
            </summary>
            <param name="offset">The new offset of the canvas.</param>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.ZoomableCanvas"/> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.ZoomableCanvas.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <param name="availableSize">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.</param>
            <returns>A <see cref="T:System.Windows.Size"/> that represents the size that is required to arrange child content.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.ZoomableCanvas"/> element.
            </summary>
            <param name="finalSize">The size that this <see cref="T:System.Windows.Controls.ZoomableCanvas"/> element should use to arrange its child elements.</param>
            <returns>A <see cref="T:System.Windows.Size"/> that represents the arranged size of this <see cref="T:System.Windows.Controls.ZoomableCanvas"/> element and its descendants.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a clipping geometry that indicates the area that will be clipped if the <see cref="P:System.Windows.UIElement.ClipToBounds"/> property is set to <c>true</c>. 
            </summary>
            <param name="layoutSlotSize">The available size of the element.</param>
            <returns>A <see cref="T:System.Windows.Media.Geometry"/> that represents the area that is clipped if <see cref="P:System.Windows.UIElement.ClipToBounds"/> is <c>true</c>.</returns>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.ChildrenExtent">
            <summary>
            Represents the extent of the instantiated UIElements calculated during <see cref="M:System.Windows.Controls.ZoomableCanvas.ArrangeOverride(System.Windows.Size)"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ZoomableCanvas.ComputedExtent">
            <summary>
            Caches the calculated <see cref="P:System.Windows.Controls.ZoomableCanvas.Extent"/> based on the spatial index and arranged children of the canvas until <see cref="M:System.Windows.Controls.ZoomableCanvas.InvalidateExtent"/> is called.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.Extent">
            <summary>
            Gets the extent of the populated area of the canvas (in canvas coordinates).
            </summary>
            <remarks>
            This property is also used to determine the range of the scroll bars when the canvas is hosted within a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.InvalidateExtent">
            <summary>
            Re-computes the <see cref="P:System.Windows.Controls.ZoomableCanvas.Extent"/> of items in the canvas and updates the parent scroll viewer if there is one.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.GetVisualPoint(System.Windows.Point)">
            <summary>
            Gets the current visual coordinates for a given <see cref="T:System.Windows.Point"/> on this <see cref="T:System.Windows.Controls.ZoomableCanvas"/>.
            </summary>
            <param name="canvasPoint">The <see cref="T:System.Windows.Point"/> in canvas coordinates.</param>
            <returns>The current position of the canvas point on the screen relative to the upper-left corner of this <see cref="T:System.Windows.Controls.ZoomableCanvas"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.ZoomableCanvas.GetCanvasPoint(System.Windows.Point)">
            <summary>
            Gets the point on the canvas that is currently represented by the given <see cref="T:System.Windows.Point"/> on the screen.
            </summary>
            <param name="screenPoint">The <see cref="T:System.Windows.Point"/> on the screen relative to the upper-left corner of this <see cref="T:System.Windows.Controls.ZoomableCanvas"/>.</param>
            <returns>The point on the canvas that corresponds to the given point on the screen.</returns>
        </member>
        <member name="P:System.Windows.Controls.ZoomableCanvas.MousePosition">
            <summary>
            Returns the the point on the canvas at which the mouse cursor is currently located.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.AccordionAutomationPeer">
            <summary>
            Exposes Accordion types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.OwnerAccordion">
            <summary>
            Gets the Accordion that owns this AccordionAutomationPeer.
            </summary>
            <value>The accordion.</value>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.#ctor(System.Windows.Controls.Accordion)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.AccordionAutomationPeer"/> class.
            </summary>
            <param name="owner">The Accordion that is associated with this
            AccordionAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Accordion that is associated with this
            AccordionAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name Accordion.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Accordion that is associated
            with this AccordionAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Accordion that is associated
            with this AccordionAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of AccordionItemAutomationPeer elements, or null if the
            Accordion that is associated with this AccordionAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <summary>
            Exposes a data item  to UI Automation.
            </summary>
            <param name="item">The item to expose</param>
            <returns>The UI automation object associated with the item</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.AccordionItemAutomationPeer">
            <summary>
            Exposes AccordionItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.OwnerAccordionItem">
            <summary>
            Gets the AccordionItem that owns this AccordionItemAutomationPeer.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.ItemsControlAutomationPeer)">
            <summary>
            Initializes a new instance of the AccordionAutomationPeer class.
            </summary>
            <param name="item">
            The item associated with this AutomationPeer 
            </param>
            <param name="itemsControlAutomationPeer">
            The Accordion that is associated with this item.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the AccordionItem that is associated
            with this AccordionItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the AccordionItem that is associated with this
            AccordionItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name AccordionItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the AccordionItem that is associated
            with this AccordionItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the Accordion.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Collapses the AccordionItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Expands the AccordionItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the AccordionItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Accordion is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Accordion from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Accordion.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.AccordionItemWrapperAutomationPeer">
            <summary>
            Wraps an <see cref="T:System.Windows.Controls.AccordionItem" />.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemWrapperAutomationPeer.#ctor(System.Windows.Controls.AccordionItem)">
            <summary>
            Constructor
            </summary>
            <param name="item">The <see cref="T:System.Windows.Controls.AccordionItem" /> to wrap.</param>
        </member>
        <member name="T:System.Windows.RectExtensions">
            <summary>
            Provides extension methods for rects.
            </summary>
        </member>
        <member name="M:System.Windows.RectExtensions.GetCenter(System.Windows.Rect)">
            <summary>
            Returns the center point of the <see cref="T:System.Windows.Rect"/>.
            </summary>
            <param name="rect">The rect to return the center point of.</param>
            <returns>The center <see cref="T:System.Windows.Point"/> of the <paramref name="rect"/>.</returns>
        </member>
        <member name="M:System.Windows.RectExtensions.IsDefined(System.Windows.Rect)">
            <summary>
            Returns whether the <see cref="T:System.Windows.Rect"/> defines a real area in space.
            </summary>
            <param name="rect">The rect to test.</param>
            <returns><c>true</c> if rect defines an area or point in finite space, which is not the case for <see cref="P:System.Windows.Rect.Empty"/> or if any of the fields are <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Windows.RectExtensions.Intersects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle, properly considering the empty rect and infinities.
            </summary>
            <param name="self">The current rectangle.</param>
            <param name="rect">The rectangle to check.</param>
            <returns><c>true</c> if the specified rectangle intersects with the current rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.LinkedListExtensions">
            <summary>
            Provides extension methods for LinkedList.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.FindNext``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>
            Finds the next node after the given node that contains the specified value.
            </summary>
            <typeparam name="T">The type of value in the linked list.</typeparam>
            <param name="list">The linked list.</param>
            <param name="node">The node after which to search for the value in the linked list, or <c>null</c> to search from the beginning.</param>
            <param name="value">The value to locate in the linked list.</param>
            <returns>The first node after the given node that contains the specified value, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.FindPrevious``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>
            Finds the previous node before the given node that contains the specified value.
            </summary>
            <typeparam name="T">The type of value in the linked list.</typeparam>
            <param name="list">The linked list.</param>
            <param name="node">The node before which to search for the value in the linked list, or <c>null</c> to search from the end.</param>
            <param name="value">The value to locate in the linked list.</param>
            <returns>The first node before the given node that contains the specified value, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.PriorityQuadTree`1">
            <summary>
            This class efficiently stores and lazily retrieves arbitrarily sized and positioned objects in a prioritized order in a quad-tree data structure.
            This can be used to do efficient hit detection or visibility checks on objects in a two dimensional space.
            The object does not need to implement any special interface because the Rect Bounds of those objects is handled as a separate argument to Insert.
            </summary>
            <remarks>
            Original class written by Chris Lovett.
            Prioritization and lazy enumeration added by Kael Rowan.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Collections.Generic.PriorityQuadTree`1.QuadNode" -->
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.#ctor(`0,System.Windows.Rect,System.Double)">
            <summary>
            Construct new QuadNode to wrap the given node with given bounds.
            </summary>
            <param name="node">The node with generic type T.</param>
            <param name="bounds">The bounds of that node.</param>
            <param name="priority">The priority of that node.</param>
        </member>
        <member name="P:System.Collections.Generic.PriorityQuadTree`1.QuadNode.Node">
            <summary>
            The wrapped node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQuadTree`1.QuadNode.Bounds">
            <summary>
            The Rect bounds of the node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQuadTree`1.QuadNode.Priority">
            <summary>
            The priority of the node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQuadTree`1.QuadNode.Next">
            <summary>
            QuadNodes form a linked list in the Quadrant.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.InsertInto(System.Collections.Generic.PriorityQuadTree{`0}.QuadNode)">
            <summary>
            Inserts this QuadNode into an existing list and returns the new tail of the list.
            </summary>
            <param name="tail">The tail of an existing circular linked list of QuadNodes, or <c>null</c> if this is the first.</param>
            <returns>The (possibly new) tail of the circular linked list after inserting this QuadNode into it.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.GetNodesIntersecting(System.Windows.Rect)">
            <summary>
            Walk the linked list of QuadNodes and check them against the given bounds.
            </summary>
            <param name="bounds">The bounds to test against each node.</param>
            <returns>A lazy list of nodes along with the priority of the next node.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.GetNodesInside(System.Windows.Rect)">
            <summary>
            Walk the linked list of QuadNodes and check them against the given bounds.
            </summary>
            <param name="bounds">The bounds to test against each node.</param>
            <returns>A lazy list of nodes along with the priority of the next node.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.HasNodesIntersecting(System.Windows.Rect)">
            <summary>
            Walk the linked list and test each node against the given bounds.
            </summary>
            <param name="bounds">Bounds to test.</param>
            <returns>Return true if a node in the list intersects the bounds.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.QuadNode.HasNodesInside(System.Windows.Rect)">
            <summary>
            Walk the linked list and test each node against the given bounds.
            </summary>
            <param name="bounds">Bounds to test.</param>
            <returns>Return true if a node in the list is inside the bounds.</returns>
        </member>
        <member name="T:System.Collections.Generic.PriorityQuadTree`1.Quadrant">
            <summary>
            The quad tree is split up into four Quadrants and objects are stored in the quadrant that contains them
            and each quadrant is split up into four child Quadrants recurrsively.  Objects that overlap more than
            one quadrant are stored in the nodes list for this Quadrant.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.#ctor(System.Windows.Rect)">
            <summary>
            Construct new Quadrant with a given bounds all nodes stored inside this quadrant
            will fit inside this bounds.  
            </summary>
            <param name="bounds">The bounds of this quadrant</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.Insert(`0,System.Windows.Rect,System.Double,System.Int32)">
            <summary>
            Insert the given node.
            </summary>
            <param name="node">The wrapped node.</param>
            <param name="bounds">The bounds of that node.</param>
            <param name="priority">The priority of that node.</param>
            <param name="depth">The recursive depth of this call, to avoid stack overflows.</param>
            <returns>The quadrant that ultimately holds the node.</returns>            
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.Remove(`0,System.Windows.Rect)">
            <summary>
            Removes the first occurance of the given node from this quadrant or any child quadrants within the search bounds.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="bounds">The bounds to search within.</param>
            <returns><c>true</c> if the node was found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.GetNodesIntersecting(System.Windows.Rect)">
            <summary>
            Returns all nodes in this quadrant that intersect the given bounds.
            The nodes are returned in order of descending priority.
            </summary>
            <param name="bounds">The bounds that intersects the nodes you want returned.</param>
            <returns>A lazy list of nodes along with the new potential of this quadrant.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.GetNodesInside(System.Windows.Rect)">
            <summary>
            Returns all nodes in this quadrant that are fully contained within the given bounds.
            The nodes are returned in order of descending priority.
            </summary>
            <param name="bounds">The bounds that contains the nodes you want returned.</param>
            <returns>A lazy list of nodes along with the new potential of this quadrant.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.HasNodesInside(System.Windows.Rect)">
            <summary>
            Return true if there are any nodes in this Quadrant are inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test</param>
            <returns><c>true</c> if this quadrant or its subquadrants has nodes inside the bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.HasNodesIntersecting(System.Windows.Rect)">
            <summary>
            Return true if there are any nodes in this Quadrant that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test</param>
            <returns><c>true</c> if this quadrant or its subquadrants has nodes intersecting the bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.RemoveNode(`0)">
            <summary>
            Remove the given node from this Quadrant.(non-recursive)
            </summary>
            <param name="node">The node to remove.</param>            
            <returns>Returns true if the node was found and removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.CalculatePotential">
            <summary>
            The maximum priority for this quadrant's and all of its subquadrants' nodes.
            </summary>
            <returns>The maximum priority for this quadrant's and all of its subquadrants' nodes.</returns>
            <remarks>This call assumes that the potential is correctly set on the subquadrants.</remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Quadrant.GetEnumerator">
            <summary>
            Enumerates over all nodes within this quadrant in random order.
            </summary>
            <returns>
            Enumerator that enumerates over all its nodes.
            </returns>
        </member>
        <member name="F:System.Collections.Generic.PriorityQuadTree`1._extent">
            <summary>
            The extent defines the subdivisible bounds of the quad tree index.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQuadTree`1._root">
            <summary>
            The outer PriorityQuadTree class is essentially just a wrapper around a tree of Quadrants.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQuadTree`1.MaxTreeDepth">
            <summary>
            The MaxTreeDepth limit is required since recursive calls can go that deep if item bounds (height or width) are very small compared to Extent (height or width).
            The max depth will prevent stack overflow exception in some of the recursive calls we make.
            With a value of 50 the item bounds can be 2^-50 times the extent before the tree stops growing in height.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQuadTree`1.Extent">
            <summary>
            The extent determines the overall quad-tree indexing strategy.
            Changing this bounds is expensive since it has to re-divide the entire thing - like a re-hash operation.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Insert(`0,System.Windows.Rect,System.Double)">
            <summary>
            Insert an item with given bounds and priority into this QuadTree.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="bounds">The bounds of this item.</param>
            <param name="priority">The priority to return this item before others in query results.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.HasItemsInside(System.Windows.Rect)">
            <summary>
            Gets whether any items are fully inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns><c>true</c> if any items are inside the given bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)">
            <summary>
            Get a list of the items that are fully inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The items that are inside the given bounds, returned in the order given by the priority assigned during Insert.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.HasItemsIntersecting(System.Windows.Rect)">
            <summary>
            Gets whether any items intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns><c>true</c> if any items intersect the given bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.GetItemsIntersecting(System.Windows.Rect)">
            <summary>
            Get list of nodes that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The items that intersect the given bounds, returned in the order given by the priority assigned during Insert.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Remove(`0)">
            <summary>
            Removes the first instance of the given item from the tree (if it exists) by searching through the entire tree for the item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found and removed; otherwise, <c>false</c>.</returns>
            <remarks>
            This overload does a full search through the entire tree for the item.
            Clients should instead call the overload that takes a <see cref="T:System.Windows.Rect"/> if the bounds of the item are known.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Remove(`0,System.Windows.Rect)">
            <summary>
            Removes the first instance of the given item that intersects the given bounds from the tree (if it exists).
            </summary>
            <param name="item">The item to remove.</param>
            <param name="bounds">The bounds within to search for the item.</param>
            <returns><c>true</c> if the item was found and removed; otherwise, <c>false</c>.</returns>
            <remarks>
            This overload does a partial search through the tree, so if the <paramref name="bounds"/> do not intersect the node then the node will be missed.
            Clients should instead call the overload that does not take a <see cref="T:System.Windows.Rect"/> if the bounds of the item are not known.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.Clear">
            <summary>
            Removes all nodes from the tree.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.ReIndex">
            <summary>
            Rebuilds all the Quadrants according to the current QuadTree Bounds.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:System.Collections.Generic.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQuadTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:System.Collections.Generic.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`2">
            <summary>
            Represents a queue of items that are sorted based on individual priorities.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TPriority">Specifies the type of object representing the priority.</typeparam>
        </member>
        <member name="T:System.MathExtensions">
            <summary>Provides extension methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
        </member>
        <member name="M:System.MathExtensions.Ceiling(System.Decimal)">
            <summary>Returns the smallest integer greater than or equal to the specified decimal number.</summary>
            <returns>The smallest integer greater than or equal to value.</returns>
            <param name="value">A decimal number.</param>
        </member>
        <member name="M:System.MathExtensions.Ceiling(System.Double)">
            <summary>Returns the smallest integer greater than or equal to the specified double-precision floating-point number.</summary>
            <returns>The smallest integer greater than or equal to value. If value is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.</returns>
            <param name="value">A double-precision floating-point number.</param>
        </member>
        <member name="M:System.MathExtensions.Floor(System.Decimal)">
            <summary>Returns the largest integer less than or equal to the specified decimal number.</summary>
            <returns>The largest integer less than or equal to value.</returns>
            <param name="value">A decimal number.</param>
        </member>
        <member name="M:System.MathExtensions.Floor(System.Double)">
            <summary>Returns the largest integer less than or equal to the specified double-precision floating-point number.</summary>
            <returns>The largest integer less than or equal to value. If value is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.</returns>
            <param name="value">A double-precision floating-point number.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Byte,System.Byte)">
            <summary>Returns the larger of two 8-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Decimal,System.Decimal)">
            <summary>Returns the larger of two decimal numbers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Double,System.Double)">
            <summary>Returns the larger of two double-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is larger. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Single,System.Single)">
            <summary>Returns the larger of two single-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is larger. If a, or b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Int16,System.Int16)">
            <summary>Returns the larger of two 16-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Int32,System.Int32)">
            <summary>Returns the larger of two 32-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.Int64,System.Int64)">
            <summary>Returns the larger of two 64-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.SByte,System.SByte)">
            <summary>Returns the larger of two 8-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.UInt16,System.UInt16)">
            <summary>Returns the larger of two 16-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.UInt32,System.UInt32)">
            <summary>Returns the larger of two 32-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtLeast(System.UInt64,System.UInt64)">
            <summary>Returns the larger of two 64-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Byte,System.Byte)">
            <summary>Returns the smaller of two 8-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Decimal,System.Decimal)">
            <summary>Returns the smaller of two decimal numbers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Double,System.Double)">
            <summary>Returns the smaller of two double-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is smaller. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Single,System.Single)">
            <summary>Returns the smaller of two single-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is smaller. If a, b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Int16,System.Int16)">
            <summary>Returns the smaller of two 16-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Int32,System.Int32)">
            <summary>Returns the smaller of two 32-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.Int64,System.Int64)">
            <summary>Returns the smaller of two 64-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.SByte,System.SByte)">
            <summary>Returns the smaller of two 8-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 8-bit signed integers to compare.</param>
            <param name="b">The second of two 8-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.UInt16,System.UInt16)">
            <summary>Returns the smaller of two 16-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.UInt32,System.UInt32)">
            <summary>Returns the smaller of two 32-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.AtMost(System.UInt64,System.UInt64)">
            <summary>Returns the smaller of two 64-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>Returns the value constrained inclusively between two 8-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Returns the value constrained inclusively between two decimal numbers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>Returns the value constrained inclusively between two double-precision floating-point numbers.</summary>
            <returns>A value between a and b inclusively. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Single,System.Single,System.Single)">
            <summary>Returns the value constrained inclusively between two single-precision floating-point numbers.</summary>
            <returns>A value between a and b inclusively. If a, b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>Returns the value constrained inclusively between two 16-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>Returns the value constrained inclusively between two 32-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>Returns the value constrained inclusively between two 64-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>Returns the value constrained inclusively between two 8-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 8-bit signed integers to compare.</param>
            <param name="b">The second of two 8-bit signed integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>Returns the value constrained inclusively between two 16-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Returns the value constrained inclusively between two 32-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>Returns the value constrained inclusively between two 64-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:System.MathExtensions.Round(System.Decimal)">
            <summary>Rounds a decimal value to the nearest integer.</summary>
            <returns>The integer nearest parameter value. If value is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Double)">
            <summary>Rounds a double-precision floating-point value to the nearest integer.</summary>
            <returns>The integer nearest value. If value is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.Round(System.Decimal,System.Int32)">
            <summary>Rounds a decimal value to a specified precision.</summary>
            <returns>The number nearest value with a precision equal to decimals. If value is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of value is less than decimals, then value is returned unchanged.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="decimals">The number of significant decimal places  (precision) in the return value.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">decimals is less than 0 or greater than 28.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Decimal,System.MidpointRounding)">
            <summary>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The integer nearest value. If value is halfway between two numbers, one of which is even and the other odd, then mode determines which of the two is returned.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Double,System.Int32)">
            <summary>Rounds a double-precision floating-point value to the specified precision.</summary>
            <returns>The number nearest value with a precision equal to digits. If value is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of value is less than digits, then value is returned unchanged.</returns>
            <param name="digits">The number of significant digits (precision) in the return value.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Double,System.MidpointRounding)">
            <summary>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The integer nearest value. If value is halfway between two integers, one of which is even and the other odd, then mode determines which of the two is returned.</returns>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The number nearest value with a precision equal to decimals. If value is halfway between two numbers, one of which is even and the other odd, then mode determines which of the two numbers is returned. If the precision of value is less than decimals, then value is returned unchanged.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="decimals">The number of significant decimal places  (precision) in the return value.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">decimals is less than 0 or greater than 28.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>Rounds a double-precision floating-point value to the specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The number nearest value with a precision equal to digits. If value is halfway between two numbers, one of which is even and the other odd, then the mode parameter determines which number is returned. If the precision of value is less than digits, then value is returned unchanged.</returns>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="digits">The number of significant digits (precision) in the return value.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Double,System.Double)">
            <summary>Rounds a double-precision floating-point value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Single,System.Single)">
            <summary>Rounds a single-precision floating-point value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int64,System.Int64)">
            <summary>Rounds a 64-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int32,System.Int32)">
            <summary>Rounds a 32-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int16,System.Int16)">
            <summary>Rounds a 16-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Byte,System.Byte)">
            <summary>Rounds a 8-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 8-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Decimal)">
            <summary>Rounds a decimal value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Double)">
            <summary>Rounds a double-precision floating-point value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Single)">
            <summary>Rounds a single-precision floating-point value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int64)">
            <summary>Rounds a 64-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int32)">
            <summary>Rounds a 32-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Int16)">
            <summary>Rounds a 16-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundUp(System.Byte)">
            <summary>Rounds a 8-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 8-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Double,System.Double)">
            <summary>Rounds a double-precision floating-point value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Single,System.Single)">
            <summary>Rounds a single-precision floating-point value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int64,System.Int64)">
            <summary>Rounds a 64-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int32,System.Int32)">
            <summary>Rounds a 32-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int16,System.Int16)">
            <summary>Rounds a 16-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Byte,System.Byte)">
            <summary>Rounds an 8-bit unsigned integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">An 8-bit unsigned integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Decimal)">
            <summary>Rounds a decimal value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Double)">
            <summary>Rounds a double-precision floating-point value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Single)">
            <summary>Rounds a single-precision floating-point value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int64)">
            <summary>Rounds a 64-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int32)">
            <summary>Rounds a 32-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Int16)">
            <summary>Rounds a 16-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.RoundDown(System.Byte)">
            <summary>Rounds an 8-bit unsigned integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">An 8-bit unsigned integer to be rounded.</param>
        </member>
        <member name="M:System.MathExtensions.Truncate(System.Decimal)">
            <summary>Calculates the integral part of a specified decimal number.</summary>
            <returns>The integral part of value; that is, the number that remains after any fractional digits have been discarded.</returns>
            <param name="value">A number to truncate.</param>
        </member>
        <member name="M:System.MathExtensions.Truncate(System.Double)">
            <summary>Calculates the integral part of a specified double-precision floating-point number.</summary>
            <returns>The integral part of value; that is, the number that remains after any fractional digits have been discarded.</returns>
            <param name="value">A number to truncate.</param>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Decimal)">
            <summary>Returns the absolute value of a <see cref="T:System.Decimal"/> number.</summary>
            <returns>A <see cref="T:System.Decimal"/>, x, such that 0 ≤ x ≤ <see cref="F:System.Decimal.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Decimal.MinValue"/> ≤ value ≤ <see cref="F:System.Decimal.MaxValue"/>.</param>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Double)">
            <summary>Returns the absolute value of a double-precision floating-point number.</summary>
            <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Double.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Double.MinValue"/> ≤ value ≤ <see cref="F:System.Double.MaxValue"/>.</param>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Single)">
            <summary>Returns the absolute value of a single-precision floating-point number.</summary>
            <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Single.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Single.MinValue"/> ≤ value ≤ <see cref="F:System.Single.MaxValue"/>.</param>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Int16)">
            <summary>Returns the absolute value of a 16-bit signed integer.</summary>
            <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int16.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int16.MinValue"/> &lt; value ≤ <see cref="F:System.Int16.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int16.MinValue"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Int32)">
            <summary>Returns the absolute value of a 32-bit signed integer.</summary>
            <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int32.MinValue"/> &lt; value ≤ <see cref="F:System.Int32.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int32.MinValue"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Abs(System.Int64)">
            <summary>Returns the absolute value of a 64-bit signed integer.</summary>
            <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int64.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int64.MinValue"/> &lt; value ≤ <see cref="F:System.Int64.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int64.MinValue"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Abs(System.SByte)">
            <summary>Returns the absolute value of an 8-bit signed integer.</summary>
            <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.SByte.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.SByte.MinValue"/> &lt; value ≤ <see cref="F:System.SByte.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.SByte.MinValue"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.BigMul(System.Int32,System.Int32)">
            <summary>Produces the full product of two 32-bit numbers.</summary>
            <returns>The <see cref="T:System.Int64"/> containing the product of the specified numbers.</returns>
            <param name="a">The first <see cref="T:System.Int32"/> to multiply.</param>
            <param name="b">The second <see cref="T:System.Int32"/> to multiply.</param>
        </member>
        <member name="M:System.MathExtensions.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</summary>
            <returns>The <see cref="T:System.Int32"/> containing the quotient of the specified numbers.</returns>
            <param name="a">The <see cref="T:System.Int32"/> that contains the dividend.</param>
            <param name="result">The <see cref="T:System.Int32"/> that receives the remainder.</param>
            <param name="b">The <see cref="T:System.Int32"/> that contains the divisor.</param>
            <exception cref="T:System.DivideByZeroException">b is zero.</exception>
        </member>
        <member name="M:System.MathExtensions.DivRem(System.Int64,System.Int64,System.Int64@)">
            <summary>Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</summary>
            <returns>The <see cref="T:System.Int64"/> containing the quotient of the specified numbers.</returns>
            <param name="a">The <see cref="T:System.Int64"/> that contains the dividend.</param>
            <param name="result">The <see cref="T:System.Int64"/> that receives the remainder.</param>
            <param name="b">The <see cref="T:System.Int64"/> that contains the divisor.</param>
            <exception cref="T:System.DivideByZeroException">b is zero.</exception>
        </member>
        <member name="M:System.MathExtensions.Exp(System.Double)">
            <summary>Returns e raised to the specified power.</summary>
            <returns>The number e raised to the power value. If value equals <see cref="F:System.Double.NaN"/> or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned. If value equals <see cref="F:System.Double.NegativeInfinity"/>, 0 is returned.</returns>
            <param name="value">A number specifying a power.</param>
        </member>
        <member name="M:System.MathExtensions.IEEERemainder(System.Double,System.Double)">
            <summary>Returns the remainder resulting from the division of a specified number by another specified number.</summary>
            <returns>A number equal to x - (y Q), where Q is the quotient of x / y rounded to the nearest integer (if x / y falls halfway between two integers, the even integer is returned).If x - (y Q) is zero, the value +0 is returned if x is positive, or -0 if x is negative. If y = 0, <see cref="F:System.Double.NaN"/> (Not-A-Number) is returned.</returns>
            <param name="y">A divisor.</param>
            <param name="x">A dividend.</param>
        </member>
        <member name="M:System.MathExtensions.Log(System.Double)">
            <summary>Returns the natural (base e) logarithm of a specified number.</summary>
            <returns>See <see cref="M:System.Math.Log(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:System.MathExtensions.Log(System.Double,System.Double)">
            <summary>Returns the logarithm of a specified number in a specified base.</summary>
            <returns>See <see cref="M:System.Math.Log(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
            <param name="newBase">The base of the logarithm.</param>
        </member>
        <member name="M:System.MathExtensions.Log10(System.Double)">
            <summary>Returns the base 10 logarithm of a specified number.</summary>
            <returns>See <see cref="M:System.Math.Log10(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:System.MathExtensions.Pow(System.Double,System.Double)">
            <summary>Returns a specified number raised to the specified power.</summary>
            <returns>The number x raised to the power y. See <see cref="M:System.Math.Pow(System.Double,System.Double)"/> for details.</returns>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Decimal)">
            <summary>Returns a value indicating the sign of a decimal number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed <see cref="T:System.Decimal"/> number.</param>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Double)">
            <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
            <exception cref="T:System.ArithmeticException">value is equal to <see cref="F:System.Double.NaN"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Single)">
            <summary>Returns a value indicating the sign of a single-precision floating-point number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
            <exception cref="T:System.ArithmeticException">value is equal to <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Int16)">
            <summary>Returns a value indicating the sign of a 16-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Int32)">
            <summary>Returns a value indicating the sign of a 32-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:System.MathExtensions.Sign(System.Int64)">
            <summary>Returns a value indicating the sign of a 64-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:System.MathExtensions.Sign(System.SByte)">
            <summary>Returns a value indicating the sign of an 8-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:System.MathExtensions.Sqrt(System.Double)">
            <summary>Returns the square root of a specified number.</summary>
            <returns><see cref="M:System.Math.Sqrt(System.Double)"/> for details.</returns>
            <param name="value">A number.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Determines whether a decimal value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A decimal value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Double,System.Double,System.Double)">
            <summary>Determines whether a double-precision floating-point value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A double-precision floating-point value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Single,System.Single,System.Single)">
            <summary>Determines whether a single-precision floating-point value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A double-precision floating-point value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>Determines whether a 64-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 64-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>Determines whether a 32-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 32-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Int16,System.Int16,System.Int16)">
            <summary>Determines whether a 16-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 16-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsBetween(System.Byte,System.Byte,System.Byte)">
            <summary>Determines whether an 8-bit unsigned integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">An 8-bit unsigned integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:System.MathExtensions.IsNaN(System.Double)">
            <summary>Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>true if value evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
            <param name="value">A double-precision floating-point number. </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.MathExtensions.IsNaN(System.Single)">
            <summary>Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>true if value evaluates to not a number (<see cref="F:System.Single.NaN"/>); otherwise, false.</returns>
            <param name="f">A single-precision floating-point number. </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.MathExtensions.GetValueOrDefault(System.Double)">
            <summary>Retrieves the value of the specified number, or zero if it's not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Double.NaN"/>; otherwise, 0.0.</returns>
            <param name="value">A double-precision floating-point number. </param>
        </member>
        <member name="M:System.MathExtensions.GetValueOrDefault(System.Double,System.Double)">
            <summary>Retrieves the value of the specified number, or the specified default value if it's not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Double.NaN"/>; otherwise, the <paramref name="defaultValue"/> parameter.</returns>
            <param name="value">A double-precision floating-point number. </param>
            <param name="defaultValue">The value to return if <see cref="M:System.MathExtensions.IsNaN(System.Double)"/> returns true.</param>
        </member>
        <member name="M:System.MathExtensions.GetValueOrDefault(System.Single)">
            <summary>Retrieves the value of the specified number, or zero if it's not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Single.NaN"/>; otherwise, 0.0.</returns>
            <param name="value">A single-precision floating-point number. </param>
        </member>
        <member name="M:System.MathExtensions.GetValueOrDefault(System.Single,System.Single)">
            <summary>Retrieves the value of the specified number, or the specified default value if it's not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Single.NaN"/>; otherwise, the <paramref name="defaultValue"/> parameter.</returns>
            <param name="value">A single-precision floating-point number. </param>
            <param name="defaultValue">The value to return if <see cref="M:System.MathExtensions.IsNaN(System.Double)"/> returns true.</param>
        </member>
        <member name="M:System.MathExtensions.Acos(System.Double)">
            <summary>Returns the angle whose cosine is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- <see cref="F:System.Double.NaN"/> if value &lt; -1 or value &gt; 1.</returns>
            <param name="value">A number representing a cosine, where -1 ≤ value ≤ 1.</param>
        </member>
        <member name="M:System.MathExtensions.Asin(System.Double)">
            <summary>Returns the angle whose sine is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- <see cref="F:System.Double.NaN"/> if value &lt; -1 or value &gt; 1.</returns>
            <param name="value">A number representing a sine, where -1 ≤ value ≤ 1.</param>
        </member>
        <member name="M:System.MathExtensions.Atan(System.Double)">
            <summary>Returns the angle whose tangent is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- <see cref="F:System.Double.NaN"/> if value equals <see cref="F:System.Double.NaN"/>, -π/2 rounded to double precision (-1.5707963267949) if value equals <see cref="F:System.Double.NegativeInfinity"/>, or π/2 rounded to double precision (1.5707963267949) if value equals <see cref="F:System.Double.PositiveInfinity"/>.</returns>
            <param name="value">A number representing a tangent.</param>
        </member>
        <member name="M:System.MathExtensions.Atan2(System.Double,System.Double)">
            <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>
            <returns>An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. See <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for details.</returns>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
        </member>
        <member name="M:System.MathExtensions.Cos(System.Double)">
            <summary>Returns the cosine of the specified angle.</summary>
            <returns>The cosine of angle.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.Cosh(System.Double)">
            <summary>Returns the hyperbolic cosine of the specified angle.</summary>
            <returns>The hyperbolic cosine of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/> or <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/> is returned. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.Sin(System.Double)">
            <summary>Returns the sine of the specified angle.</summary>
            <returns>The sine of angle. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.Sinh(System.Double)">
            <summary>Returns the hyperbolic sine of the specified angle.</summary>
            <returns>The hyperbolic sine of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NaN"/>, this method returns a <see cref="T:System.Double"/> equal to angle.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.Tan(System.Double)">
            <summary>Returns the tangent of the specified angle.</summary>
            <returns>The tangent of angle. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.Tanh(System.Double)">
            <summary>Returns the hyperbolic tangent of the specified angle.</summary>
            <returns>The hyperbolic tangent of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/>, this method returns -1. If angle is equal to <see cref="F:System.Double.PositiveInfinity"/>, this method returns 1. If angle is equal to <see cref="F:System.Double.NaN"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Decimal,System.Decimal)">
            <summary>Generates a sequence of decimal numbers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Generates a sequence of decimal numbers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Double,System.Double)">
            <summary>Generates a sequence of double-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Double,System.Double,System.Double)">
            <summary>Generates a sequence of double-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Single,System.Single)">
            <summary>Generates a sequence of single-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Single,System.Single,System.Single)">
            <summary>Generates a sequence of single-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int64,System.Int64)">
            <summary>Generates a sequence of 64-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int64,System.Int64,System.Int64)">
            <summary>Generates a sequence of 64-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int32,System.Int32)">
            <summary>Generates a sequence of 32-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int32,System.Int32,System.Int32)">
            <summary>Generates a sequence of 32-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int16,System.Int16)">
            <summary>Generates a sequence of 16-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:System.MathExtensions.To(System.Int16,System.Int16,System.Int16)">
            <summary>Generates a sequence of 16-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
    </members>
</doc>
